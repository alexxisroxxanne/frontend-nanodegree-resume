JQuery = JavaScript library - is not a language
	jQuery = JavaScript function/object

$ = pointer to jQuery object
	- returns jQuery Collection (like an array but with additional
		methods)
	- can pass objects into it
		- $(string)
		- $(function)
		- $(DOM Element)
	- can call methods on it
		- $.ajax()

Recommended to use jQuery hosted on a different host (faster server)
	- can use jQuery offical or Google Content Delivery Network (CDN)
		- either is good
	- shouldn't use local
		- local : <script src='js/jquery.min.js'></script>
	- see Google's and jQuery's websites for their CDNs
	- always reference the minified version of the jQuery library

Selectors = string passed in to jQuery object that references DOM
	- $('div') = tag selector for all 'div' tags
	- var listElements = $('li');
		- grabs all 'li' elements for listElements variable
	- class selectors = much more specific than tag selectors
		- recommended
		- $('.header') = class selector for header class
	- id selectors - specific to single elements - most specific
		- $('#nav')
			- selects element with HTML id "nav"

DOM Traversal Methods - methods used to move around DOM tree
	- .parent()
		- 1 up
	- .parents()
		- many up
	- .parents('#JerryJudy')
		- specific
	- .children()
		- 1 down
	- .find()
		- many down
		- pass '*' to method to retrieve all of the descendent elements
			- h1.find('*');
				- returns descendants of h1
	- .siblings()
		- same level
		- sameLevel = item.siblings('tag');

jQuery API
	- $('#item').addClass('blue');
		- adds 'blue' class to element with id 'item'
	- use the toggleClass() method to remove the 'featured' class
		var featuredArticle;
		featuredArticle = $('.featured');
		featuredArticle.toggleClass('featured', false);
		console.log(featuredArticle);
	- same as above, but adds the 'featured' class to article3
		var article2, article3;
		article2 = $('.featured');
		article2.toggleClass('featured');
		article3 = article2.next();
		article3.toggleClass('featured');
	- add attribute 'href' with value '#1' to the first item in navList
		var navList, firstItem, link;
		navList = $('.nav-list');
		firstItem = navList.children().first();
		link = firstItem.find('a');
		link.attr('href', '#1');
	- .css() method will create inline css
		- change the font size of articleItems to 20px
			var articleItems;
			articleItems = $('.article-item');
			articleItems.css("font-size", "20px");
		- not usually recommended to add inline css
	- .html() returns the html of an element
	- .text() returns the text of an element
	- .val() returns the value of an element
		- allow live changes to h1 using the value of the text input box
			var val;
			var h1;
		    val = $('#input').val();
		    h1 = $('.articles').children('h1');
		    h1.text(val);
	- .remove() methods removes elements from the DOM
		- remove the ul from the first articel item
			var articleItems;
			articleItems = $('.article-item').children('ul');
			articleItems.remove('ul');
	- .append and .prepend add items as children of element
	- .insertBefore and .insertAfter add items as siblings of element
	- add family2 as sib to family1 and bruce as child of family2 with
	two children madison and hunter
			var family1, family2, bruce, madison, hunter;
			family1 = $('#family1');
			family2 = $('<div id="family2"><h1>Family 2</h1></div>');
			bruce = $('<div id="bruce"><h2>Bruce</h2></div>');
			madison = $('<div id="madison"><h3>Madison</h3></div>');
			hunter = $('<div id="hunter"><h3>Hunter</h3></div>');
			family2.insertAfter(family1);
			family2.append(bruce);
			bruce.append(madison);
			bruce.append(hunter);
	- must use .this to use .each method
		- iterates through jQuery collection
		- use .each to iterate through paragraphs in <p> to print
		the number of characters
			function numberAdder() {
				var text, number;
				text = $(this).text();
				number = text.length;
				$(this).text(text + " " + number);
			}
			$('p').each(numberAdder);

Why jQuery is Popular:

It's also worth noting that because so many websites use jQuery, there's a very good chance that your users' browsers have already cached the same copy of jQuery that you want to use.

If you use a CDN, your users' browsers will recognize that they already have a cached copy of jQuery from the same CDN when your site loads, which means that they don't need to download it again. So those extra KBs from jquery.min.js won't be downloaded and your site will load faster!

Last section:
A function passed into the jQuery object runs on document.ready, which occurs after the DOM has been loaded.

Why is this useful?

External JavaScript files in the <head> of a document are generally downloaded earlier than JavaScript files included in the <body>. JavaScript files are also executed immediately at their location in the document, which means they can't access any DOM elements that come after their <script> tag in the DOM. This leads to some interesting situations.

Imagine you're building a website and you've got a script you want to run against some DOM elements in the page. If you include your script in the <head> normally, it will run as soon as it's downloaded, which will occur before the DOM has built the elements you want your script to run against. So your script wouldn't be able to do anything.

You could include your script at the bottom of the <body>, but that would mean that the download could potentially start later in the load process, slowing down the initial page render.

So what can you do?

Pass your function into the jQuery object, like so:

function someFunction() {
    // Do interesting things
}
$(someFunction)
or

$(function(){
    // Do interesting things
})
Now, you can include your script in the <head> and it won't run until the DOM has been built and the elements that you want to manipulate are on the page.

To try this technique out, I've included a zip file of a sample website in the Downloadables section. Click "Continue to Quiz" to try this technique for yourself!